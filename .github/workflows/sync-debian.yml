name: Sync Debian Branches

on:
  push:
    branches: [ main ]

jobs:
  sync-packages:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout with full history
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq libxml2-utils

      - name: Find ROS packages
        id: find-packages
        run: |
          # 创建包映射数组
          declare -A packages
          
          # 单节点检测
          if [[ -f "package.xml" ]]; then
            name=$(xmllint --xpath 'string(/package/name)' package.xml)
            packages["."]="$name"
          else
            # 多节点递归查找
            while IFS= read -r dir; do
              name=$(xmllint --xpath 'string(/package/name)' "$dir/package.xml")
              packages["$dir"]="$name"
            done < <(find . -type d -exec test -f '{}/package.xml' \; -print -prune)
          fi
          
          # === 关键修复：手动构建JSON避免格式错误 ===
          json_output="{"
          for path in "${!packages[@]}"; do
            # 转义特殊字符
            safe_path=$(printf '%s' "$path" | jq -sRr @json)
            safe_name=$(printf '%s' "${packages[$path]}" | jq -sRr @json)
            json_output+="$safe_path:$safe_name,"
          done
          json_output="${json_output%,}}"
          
          echo "PACKAGE_MAP=$json_output" >> $GITHUB_ENV
          echo "Found packages: $json_output"

      - name: Validate JSON
        run: |
          # 验证JSON格式有效性
          if ! echo "$PACKAGE_MAP" | jq empty; then
            echo "::error::Invalid JSON: $PACKAGE_MAP"
            exit 1
          else
            echo "JSON validation passed"
          fi

      - name: Process commits
        env:
          PACKAGE_MAP: ${{ env.PACKAGE_MAP }}
        run: |
          # 安全解析JSON
          declare -A packages
          while IFS="=" read -r path name; do
            packages["$path"]="$name"
          done < <(echo "$PACKAGE_MAP" | jq -r 'to_entries[] | "\(.key)=\(.value)"')
          
          # ...后续步骤保持不变...
